import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the cs data to a pandas Dataframe
heart_data = pd.read_csv('/content/Heart_Disease_Prediction.csv')

#print frist 5 rows of the dataframe
heart_data.head()

#print last 5 rows
heart_data.tail()

#number of rows and column in a dataset
heart_data.shape

#getting someinfo about the data
heart_data.info()

 #checking the missing value
heart_data.isnull().sum()

#statical measurement about data
heart_data.describe()

#checking the distribution of target varible 
heart_data['Heart Disease'].value_counts()

#dropping the Heart Disease column 
X = heart_data.drop(columns='Heart Disease', axis=1)
Y = heart_data['Heart Disease']
print(X)

#splitting the data into traing data and test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
print(  X.shape, X_train.shape, X_test.shape)

#logistic Regression
model = LogisticRegression()

#traning the LogisticRegression model with traning data
#model train will try to fit xtrain and y train
model.fit(X_train, Y_train)

#model evaluation
#accuarcy on traning data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

#model evaluation
#accuracy on traning data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

#building the predective system
input_data = (57,1,4,140,192,0,0,148,0,0.4,2,0,6)

#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the numoy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1 ,-1)

prediction = model.predict(input_data_reshaped)
#print(prediction)

if(prediction == ['Presence']):
  print("you have heart disease")
else :
  print("you dont have heart disease")